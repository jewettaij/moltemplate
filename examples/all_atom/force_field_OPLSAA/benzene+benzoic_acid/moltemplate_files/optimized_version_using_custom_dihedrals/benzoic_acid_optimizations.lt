# This file contains a small optional modification to the "BenzoicAcid" molecule
# Changes like this typically have a very small effect on the simulation
# accuracy.  Most users do not need to bother doing this.
#
# If you want to use this version instead, edit the "system.lt" file and replace
#"import benzoic_acid.lt"
# ...with:
#"import optimized_version_using_custom_dihedrals/benzoic_acid_optimizations.lt"

# First load the original "BenzoicAcid" molecule.

import "benzoic_acid.lt"

BenzoicAcid {
  # Note: Here we will augment (not overwrite) the existing "BenzoicAcid"
  #       molecule (defined in "benzoic_acid.lt").
  #
  # The "oplsaa2023.lt" file defines multiple possible dihedral paramter
  # choices between these 4 atoms in this molecule:
  #     $atom:o1, $atom:co, $atom:o2, and $atom:ho2
  # (See below to find out how to detect this problem.)  The choices are:
  # "@dihedral:O~_C~_OH_HO__1", which is a generic dihedral for aliphatic
  # carboxylic acids.  However we can improve this by selecting this version:
  # "@dihedral:O~_C~_OH_HO__2", which was developed for benzoic acid.
  # Let's select the second choice:

  write("Data Dihedrals") {
    $dihedral:o1_co_o2_ho2 @dihedral:O~_C~_OH_HO__2 $atom:o1 $atom:co $atom:o2 $atom:ho2
  }
} # finish modifying BenzoicAcid




# Detailed explanation:
#
# The OPLSAA force-field often contains multiple dihedral parameter choices for
# same set of (OPLSAA-specific) atom types.  For example, it contains:
# dihedral_coeff @dihedral:O~_C~_OH_HO__1 0.000 5.500 0.00 0.0 # carboxylic acid
# dihedral_coeff @dihedral:O~_C~_OH_HO__2 0.000 5.000 0.00 0.0 # benzoic acids 
# These are seperate dihedral params for atoms of (bonded) type O~, C~, OH, HO.
# As you can see, these parameters are almost the same. The difference is small.
# These parameters were generated by fitting simulations of different molecules
# (with the same atomic elements and similar topology).
#
# By default moltemplate chooses the dihedral ending in "__1"
# (eg. "@dihedral:O~_C~_OH_HO__1").  According to William Jorgensen (who
# invented OPLSAA), the first choice is usually the most general and is
# reasonable for most molecules. But here in this file, we override this choice.
#
# ------- How to tell if multiple dihedral parameter choices exist? -----
#
# Moltemplate will report these multiple choices by running it this way:
#   moltemplate.sh system.lt -report-duplicates bytype __
#
# It will generate a file named "warning_duplicate_dihedrals.txt" if it was
# multiple dihedral choices exist for some of your atoms.  The file will be
# long, since the same warning will be printed for every copy of each molecule
# with ambiguous dihedral.  So it's better to do this on a small system.lt file
# with only one copy of each molecule type.
#
# Once you have determined the best @dihedral type to use, create a custom
# "Data Dihedrals" section similar to the one in the example above.
# Each line should have 6 entries:
#
#   $dihedral:SOME_UNIQUE_NAME  @dihedral:BEST_TYPE  followed by the four $atoms
#
# Do this for each interaction you want to override.
# (Note: Overriden dihedrals don't appear in the warning_duplicate_dihedrals.txt
#  file.  Moltemplate will stop creating this file once all of the ambiguous
#  dihedrals have been overriden.)
#
#
# NOTE:
# In addition to dihedrals, ambiguity can also happen for bonds, angles, 
# and impropers.  For example, you might also notice a file named
# "warning_duplicate_angles.txt".  If so, follow the same procedure described
# above to choose the best angle type.  Then create a custom "Data Angles"
# section (similar to the "Data Dihedrals" section above) with 5 columns
# on each line ($angle, @angle, and the three $atoms).
