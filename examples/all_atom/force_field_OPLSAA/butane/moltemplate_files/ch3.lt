# This file contains a definition for the "CH3" molecular subunit.

import "oplsaa2023.lt"

# The "oplsaa2023.lt" file defines these atom types:
#    @atom:54     "C - CT | n-CH3 C: alkane"
#    @atom:57     "C - CT | CH2 C: alkanes"
#    @atom:60     "H - HC | H: alkanes"
# The "oplsaa2023.lt" file is at:
# https://github.com/jewettaij/moltemplate/tree/master/moltemplate/force_fields/
# (If you want to customize this file, download it and copy it to this folder.)



CH3 inherits OPLSAA {

  # atom-id  mol-id   atom-type  charge   x             y                z

  write("Data Atoms") {
    $atom:c  $mol:... @atom:54    0.0  0.000000     0.000000      0.000000
    $atom:h1 $mol:... @atom:60    0.0  0.000000     0.631044      0.892431
    $atom:h2 $mol:... @atom:60    0.0  0.000000     0.631044     -0.892431
    $atom:h3 $mol:... @atom:60    0.0 -0.892431    -0.631044      0.000000
  }

  write('Data Bond List') {
    $bond:ch1 $atom:c $atom:h1
    $bond:ch2 $atom:c $atom:h2
    $bond:ch3 $atom:c $atom:h3
  }

} # CH3




# Optional: Shift all the coordinates in the +Y direction by 0.4431163.
#           This way, the carbon atom is no longer located at 0,0,0, but the
#           axis of an alkane chain containing this monomer is at 0,0,0.
#           (This makes it more convenient to construct a polymer later.
#            If this is confusing, then simply add 0.4431163 to the Y 
#            coordinates in the "Data Atoms" section above.)

CH3.move(0,0.4431163,0)




# ---- NOTES: ----
#
# In this example, atomic charges are generated by atom type (according to the
# rules in oplsaa2023.lt), and can be omitted. Just leave them as "0.00" for now.
#
# The "..." in "$mol:..." tells moltemplate that this molecule may be part
# of a larger molecule, and (if so) to use the larger parent object's 
# molecule id number as it's own.
#
######### (scratchwork calculations for the atomic coordinates) #########
#
# Lcc = 1.5350 # length of the C-C bond (Sp3)
# Lch = 1.0930 # length of the C-H bond
# theta=2*atan(sqrt(2)) # ~= 109.5 degrees = tetrahedronal angle (C-C-C angle)
# DeltaXc = Lcc*sin(theta/2)  # = 1.2533222517240594
# DeltaYc = Lcc*cos(theta/2)  # = 0.8862326632060754
#                             # 0.5*DeltaYc = 0.4431163
# DeltaZh = Lch*sin(theta/2)  # = 0.892431
# DeltaYh = Lch*cos(theta/2)  # = 0.631044
