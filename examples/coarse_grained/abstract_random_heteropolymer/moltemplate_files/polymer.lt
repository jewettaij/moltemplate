import "forcefield.lt" # <-- Defines force-field parameters, and rules.
import "monomers.lt"   # <-- Defines the "2bead", "3bead" objects we will use 
                       #     as building-blocks to build the polymer.




RandomHeteropolymer inherits ForceField {



  create_var {$mol}  # optional:force all monomers to share the same molecule-ID
                     #          If you want to share molecule-IDs, do this first
                     #          (This matches with "$mol:..." in "monomers.lt")



  monomers[0]  = new 3bead    # Let the first monomer be of type "3bead"

  # Now, fill the middle of the chain with random monomers (2bead, 3bead):

  monomers[1-48] = new random([2bead,3bead],  
                              [30,            # <-- 30 "2bead" molecules and 
                               18],           # <-- 18 "3bead" molecules
                              12345)          # <-- optional random seed

                  # and place them on the X-axis (separated by 2.95 Angstroms)
                             [48].rot(180,1,0,0).move(2.95, 0, 0)

  # Note: The two numbers (30 and 18) must sum up to the number of 
  #       monomers we created ("[48]").

  monomers[49] = new 3bead    # Let the last monomer be of type "3bead"


  # Afterwards, there should be 20 "3bead" monomers and 30 "2bead" monomers




  # Now, physically move the monomers to make sure the monomers on the end of
  # the chain (monomers[0] & monomers[49]) don't overlap with monomers[1-48]

  monomers[0].rot(180,1,0,0)    #leave monomer[0] where it is, but rotate it
  monomers[1-48].move(2.95,0,0) #move the remaining monomers to make room for it
  monomers[49].move(144.55,0,0) #move the last monomer (note:144.55=2.95*50))




  # Now, link the monomers together using "Data Bond List"
  # (Using "Data Bond List" instead of "Data Bonds", allows you to omit the
  #  bond type.  This tells moltemplate to look up the appropriate
  #  bond type according to the type of atom at either end of the bond, which
  #  depends on what type of monomer is on either side: "2bead" or "3bead".
  #  This all happens automatically.  The user can control how this is done
  #  by editing the file "forcefield.lt".)


  write("Data Bond List") {
    $bond:bb1  $atom:monomers[0]/CA $atom:monomers[1]/CA
    $bond:bb2  $atom:monomers[1]/CA $atom:monomers[2]/CA
    $bond:bb3  $atom:monomers[2]/CA $atom:monomers[3]/CA
    $bond:bb4  $atom:monomers[3]/CA $atom:monomers[4]/CA
    $bond:bb5  $atom:monomers[4]/CA $atom:monomers[5]/CA
    $bond:bb6  $atom:monomers[5]/CA $atom:monomers[6]/CA
    $bond:bb7  $atom:monomers[6]/CA $atom:monomers[7]/CA
    $bond:bb8  $atom:monomers[7]/CA $atom:monomers[8]/CA
    $bond:bb9  $atom:monomers[8]/CA $atom:monomers[9]/CA
    $bond:bb10  $atom:monomers[9]/CA $atom:monomers[10]/CA
    $bond:bb11  $atom:monomers[10]/CA $atom:monomers[11]/CA
    $bond:bb12  $atom:monomers[11]/CA $atom:monomers[12]/CA
    $bond:bb13  $atom:monomers[12]/CA $atom:monomers[13]/CA
    $bond:bb14  $atom:monomers[13]/CA $atom:monomers[14]/CA
    $bond:bb15  $atom:monomers[14]/CA $atom:monomers[15]/CA
    $bond:bb16  $atom:monomers[15]/CA $atom:monomers[16]/CA
    $bond:bb17  $atom:monomers[16]/CA $atom:monomers[17]/CA
    $bond:bb18  $atom:monomers[17]/CA $atom:monomers[18]/CA
    $bond:bb19  $atom:monomers[18]/CA $atom:monomers[19]/CA
    $bond:bb20  $atom:monomers[19]/CA $atom:monomers[20]/CA
    $bond:bb21  $atom:monomers[20]/CA $atom:monomers[21]/CA
    $bond:bb22  $atom:monomers[21]/CA $atom:monomers[22]/CA
    $bond:bb23  $atom:monomers[22]/CA $atom:monomers[23]/CA
    $bond:bb24  $atom:monomers[23]/CA $atom:monomers[24]/CA
    $bond:bb25  $atom:monomers[24]/CA $atom:monomers[25]/CA
    $bond:bb26  $atom:monomers[25]/CA $atom:monomers[26]/CA
    $bond:bb27  $atom:monomers[26]/CA $atom:monomers[27]/CA
    $bond:bb28  $atom:monomers[27]/CA $atom:monomers[28]/CA
    $bond:bb29  $atom:monomers[28]/CA $atom:monomers[29]/CA
    $bond:bb30  $atom:monomers[29]/CA $atom:monomers[30]/CA
    $bond:bb31  $atom:monomers[30]/CA $atom:monomers[31]/CA
    $bond:bb32  $atom:monomers[31]/CA $atom:monomers[32]/CA
    $bond:bb33  $atom:monomers[32]/CA $atom:monomers[33]/CA
    $bond:bb34  $atom:monomers[33]/CA $atom:monomers[34]/CA
    $bond:bb35  $atom:monomers[34]/CA $atom:monomers[35]/CA
    $bond:bb36  $atom:monomers[35]/CA $atom:monomers[36]/CA
    $bond:bb37  $atom:monomers[36]/CA $atom:monomers[37]/CA
    $bond:bb38  $atom:monomers[37]/CA $atom:monomers[38]/CA
    $bond:bb39  $atom:monomers[38]/CA $atom:monomers[39]/CA
    $bond:bb40  $atom:monomers[39]/CA $atom:monomers[40]/CA
    $bond:bb41  $atom:monomers[40]/CA $atom:monomers[41]/CA
    $bond:bb42  $atom:monomers[41]/CA $atom:monomers[42]/CA
    $bond:bb43  $atom:monomers[42]/CA $atom:monomers[43]/CA
    $bond:bb44  $atom:monomers[43]/CA $atom:monomers[44]/CA
    $bond:bb45  $atom:monomers[44]/CA $atom:monomers[45]/CA
    $bond:bb46  $atom:monomers[45]/CA $atom:monomers[46]/CA
    $bond:bb47  $atom:monomers[46]/CA $atom:monomers[47]/CA
    $bond:bb48  $atom:monomers[47]/CA $atom:monomers[48]/CA
    $bond:bb49  $atom:monomers[48]/CA $atom:monomers[49]/CA
  }

} # RandomHeteropolymer




# COMMENTS:
#
#
# 1)
# Angle, dihedral and improper interactions will be generated
# automatically according to the instructions in "monomers.lt"
#
#
#
#
# 2)
# These lines in the "Data Bond List" section can be quickly generated in python
# N = 50
# for i in range(0,N-1):
#     print('    $bond:bb'+str(i+1)+'  $atom:monomers['
#           +str(i)+']/CA $atom:monomers['+str(i+1)+']/CA')
#
#
#
# 3)
# The "[1-50]" in "monomers[1-50] = new random([2bead,3bead], ..."
# causes moltemplate to create a list of molecules with names beginning with
# "monomers[1]", for example:
#  "monomers[1], "monomers[2]", "monomers[3], ..., "monomers[50]"
# (This causes the indexing to begin at [1] instead of [0].)
#
#
#
# 4)
# ALTERNATE METHOD: You can also generate a random array this way:
#
# monomers[1-48] = new random([2bead,3bead], 
#                             [0.625, 0.375], # <-- probabilities
#                             12345)      # <-- optional random seed
#                     [48].rot(180,1,0,0).move(2.95, 0, 0)
#
# The command above also works, but it chooses each molecule (monomer) randomly
# (independently of the others).  Consequently, this does not gaurantee that 
# exactly 62.5% and 37.5% of the monomers will be of type 2bead and 3bead.
#
#
#
# 5) RandomHeteropolymer uses "2bead" and "3bead" objects as building-blocks,
# and these objects inherit the properties from the "ForceField" object 
# (atom types, bond types, etc, defined in "forcefield.lt" in this example).
# So I declared that "RandomHeteropolymer inherits ForceField {" so that 
# you can easily access those atom types, bond types, etc as well.
